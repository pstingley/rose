# rose2.py
# Print an ASCII rose using run-length encoding (RLE).
# Matrix is stored in 10-tuple-wide rows, including ('\n',1) tokens.

petals_and_stem = [
[(' ', 11), ('.', 1), ('\n', 1), (' ', 5), ('.', 3), (' ', 2), (':', 1), ('`', 2), ('.', 2), ("'", 1)],
[(':', 1), ('\n', 1), (' ', 6), (':', 1), (' ', 1), ('`', 4), ('.', 1), ("'", 1), (' ', 3), (':', 1)],
[("'", 2), (':', 2), ("'", 1), ('\n', 1), (' ', 4), ('.', 2), (':', 1), ('.', 2), (' ', 2), (':', 1)],
[(' ', 5), ('.', 1), ("'", 2), (' ', 1), (':', 1), ('\n', 1), (' ', 1), ('`', 2), ('.', 1), (' ', 4)],
[('`', 1), (':', 1), (' ', 4), ('.', 1), ("'", 1), (' ', 5), (':', 1), ('\n', 1), (' ', 5), (':', 1)],
[(' ', 4), (':', 1), (' ', 3), (':', 1), (' ', 8), (':', 1), ('\n', 1), (' ', 6), (':', 1), (' ', 3)],
[(':', 1), (' ', 3), (':', 1), (' ', 9), (':', 1), ('\n', 1), (' ', 6), (':', 1), (' ', 4), (':', 1)],
[(' ', 3), (':', 1), (' ', 8), (':', 1), ('\n', 1), (' ', 7), (':', 1), (' ', 4), (':', 1), (' ', 3)],
[(':', 1), ('.', 2), ("'", 4), ('`', 2), (':', 2), ('.', 1), ('\n', 1), (' ', 8), (':', 1), (' ', 1)],
[('.', 3), (':', 1), ('.', 2), ("'", 1), (' ', 5), ('.', 1), ("'", 2), ('\n', 1), (' ', 8), ('.', 1)],
[("'", 1), (' ', 3), ('.', 1), ("'", 1), (' ', 2), ('.', 1), (':', 4), ("'", 1), ('\n', 1), (' ', 6)],
[(':', 1), ('.', 2), ("'", 3), ('`', 2), (':', 7), ('\n', 1), (' ', 16), ('`', 1), (':', 4), ('\n', 1)],
[(' ', 19), ('`', 1), (':', 2), ('.', 1), ('\n', 1), (' ', 20), ('`', 1), (':', 2), ('\n', 1), (' ', 21)],
[(':', 3), ('.', 1), ('\n', 1), (' ', 10), ('.', 2), (':', 1), ('.', 1), (':', 1), ('.', 1), (':', 2)],
[("'", 1), ('`', 1), ('.', 1), (' ', 1), (':', 2), ("'", 1), ('`', 1), ('.', 1), (' ', 2), ('.', 1)],
[(' ', 1), (':', 1), (' ', 1), (':', 1), (' ', 1), ('.', 1), ('\n', 1), (' ', 8), ('.', 2), ("'", 1)],
[(' ', 6), ('`', 1), (':', 1), ('.', 1), (':', 1), (' ', 1), (':', 2), (' ', 3), (':', 1), ("'", 1)],
[(' ', 7), ('.', 1), (':', 1), ('\n', 1), (' ', 7), ('.', 1), (':', 1), (' ', 8), ('.', 1), (':', 1)],
[('`', 2), (':', 3), (' ', 2), (':', 1), (' ', 7), ('.', 1), (':', 1), (' ', 1), (':', 2), ('\n', 1)],
[(' ', 7), ('.', 1), (':', 1), (' ', 4), ('.', 2), ("'", 2), (' ', 5), (':', 3), ('.', 1), ("'", 1)],
[(' ', 4), (':', 1), ("'", 1), (':', 1), (' ', 4), (':', 1), ('\n', 1), (' ', 8), (':', 1), (' ', 1)],
[('.', 1), ("'", 2), (' ', 9), ('.', 1), (':', 2), (' ', 1), (':', 1), (' ', 1), (':', 1), (' ', 1)],
[("'", 1), ('\n', 1), (' ', 9), (':', 1), (' ', 10), ('.', 1), ("'", 1), ('`', 1), (':', 2), ('\n', 1)],
[(' ', 23), (':', 2), ('\n', 1), (' ', 23), (':', 2), ('\n', 1), (' ', 23), (':', 2), ('\n', 1), (' ', 23)],
[(':', 2), ('\n', 1), (' ', 23), (':', 2), ('\n', 1), (' ', 23), (':', 2), ('\n', 1), (' ', 0), (' ', 0)]
]

def rose(petals_and_stem):
    image = ""
    for row in petals_and_stem:
        for ch, count in row:
            image += ch * count
    return image

if __name__ == "__main__":
    print(rose(petals_and_stem))
